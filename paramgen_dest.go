// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package http

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	DestinationConfigHeaders            = "headers"
	DestinationConfigMethod             = "method"
	DestinationConfigParams             = "params.*"
	DestinationConfigUrl                = "url"
	DestinationConfigValidateConnection = "validateConnection"
)

func (DestinationConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		DestinationConfigHeaders: {
			Default:     "",
			Description: "Http headers to use in the request, comma separated list of : separated pairs",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestinationConfigMethod: {
			Default:     "POST",
			Description: "Http method to use in the request",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"POST", "PUT", "DELETE", "PATCH"}},
			},
		},
		DestinationConfigParams: {
			Default:     "",
			Description: "parameters to use in the request, use params.* as the config key and specify its value, ex: set \"params.id\" as \"1\".",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		DestinationConfigUrl: {
			Default:     "",
			Description: "URL is a Go template expression for the URL used in the HTTP request, using Go [templates](https://pkg.go.dev/text/template).\nThe value provided to the template is [opencdc.Record](https://github.com/ConduitIO/conduit-connector-sdk/blob/bfc1d83eb75460564fde8cb4f8f96318f30bd1b4/record.go#L81),\nso the template has access to all its fields (e.g. .Position, .Key, .Metadata, and so on). We also inject all template functions provided by [sprig](https://masterminds.github.io/sprig/)\nto make it easier to write templates.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		DestinationConfigValidateConnection: {
			Default:     "true",
			Description: "ValidateConnection send a HEAD request when opening the connector to check if the connection works.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
	}
}
