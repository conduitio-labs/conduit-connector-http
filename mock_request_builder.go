// Code generated by MockGen. DO NOT EDIT.
// Source: source.go
//
// Generated by this command:
//
//	mockgen -destination=mock_request_builder.go -source=source.go -package=http -mock_names=requestBuilder=MockRequestBuilder . requestBuilder
//

// Package http is a generated GoMock package.
package http

import (
	context "context"
	reflect "reflect"

	sdk "github.com/conduitio/conduit-connector-sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockRequestBuilder is a mock of requestBuilder interface.
type MockRequestBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockRequestBuilderMockRecorder
}

// MockRequestBuilderMockRecorder is the mock recorder for MockRequestBuilder.
type MockRequestBuilderMockRecorder struct {
	mock *MockRequestBuilder
}

// NewMockRequestBuilder creates a new mock instance.
func NewMockRequestBuilder(ctrl *gomock.Controller) *MockRequestBuilder {
	mock := &MockRequestBuilder{ctrl: ctrl}
	mock.recorder = &MockRequestBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestBuilder) EXPECT() *MockRequestBuilderMockRecorder {
	return m.recorder
}

// build mocks base method.
func (m *MockRequestBuilder) build(ctx context.Context, previousResponseData map[string]any, position sdk.Position) (*Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "build", ctx, previousResponseData, position)
	ret0, _ := ret[0].(*Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// build indicates an expected call of build.
func (mr *MockRequestBuilderMockRecorder) build(ctx, previousResponseData, position any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "build", reflect.TypeOf((*MockRequestBuilder)(nil).build), ctx, previousResponseData, position)
}

// MockresponseParser is a mock of responseParser interface.
type MockresponseParser struct {
	ctrl     *gomock.Controller
	recorder *MockresponseParserMockRecorder
}

// MockresponseParserMockRecorder is the mock recorder for MockresponseParser.
type MockresponseParserMockRecorder struct {
	mock *MockresponseParser
}

// NewMockresponseParser creates a new mock instance.
func NewMockresponseParser(ctrl *gomock.Controller) *MockresponseParser {
	mock := &MockresponseParser{ctrl: ctrl}
	mock.recorder = &MockresponseParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockresponseParser) EXPECT() *MockresponseParserMockRecorder {
	return m.recorder
}

// parse mocks base method.
func (m *MockresponseParser) parse(ctx context.Context, responseBytes []byte) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parse", ctx, responseBytes)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// parse indicates an expected call of parse.
func (mr *MockresponseParserMockRecorder) parse(ctx, responseBytes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parse", reflect.TypeOf((*MockresponseParser)(nil).parse), ctx, responseBytes)
}
